{"ast":null,"code":"import { postConstants } from \"./constants\";\nimport axios from \"axios\";\nconst baseURL = \"http://localhost:8000\";\nexport const createPost = data => {\n  console.log(data);\n  return async dispatch => {\n    dispatch({\n      type: postConstants.POST_REQUEST\n    });\n    try {\n      await axios.post(baseURL + `/posts`, data).then(response => {\n        console.log(response.data);\n        dispatch({\n          type: postConstants.POST_CREATE_SUCCESS,\n          payload: {\n            posts: response.data\n          }\n        });\n        axios.get(baseURL + `/posts`).then(response => {\n          console.log(response.data);\n          dispatch({\n            type: postConstants.POST_GET_ALL_SUCCESS,\n            payload: {\n              posts: response.data\n            }\n          });\n        });\n      }).catch(error => {\n        dispatch({\n          type: postConstants.POST_CREATE_FAILURE,\n          payload: error\n        });\n      });\n    } catch (error) {\n      console.log(error.response);\n      dispatch({\n        type: postConstants.POST_CREATE_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const getAllPost = () => {\n  return async dispatch => {\n    dispatch({\n      type: postConstants.POST_REQUEST\n    });\n    try {\n      await axios.get(baseURL + `/posts`).then(response => {\n        console.log(response.data);\n        dispatch({\n          type: postConstants.POST_GET_ALL_SUCCESS,\n          payload: {\n            posts: response.data\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: postConstants.POST_CREATE_FAILURE,\n          payload: error\n        });\n      });\n    } catch (error) {\n      console.log(error.response);\n      dispatch({\n        type: postConstants.POST_GET_ALL_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const getPostById = postId => {\n  return async dispatch => {\n    dispatch({\n      type: postConstants.POST_REQUEST\n    });\n    try {\n      await axios.get(baseURL + `/posts/${postId}`).then(response => {\n        console.log(response.data);\n        dispatch({\n          type: postConstants.POST_GET_ALL_SUCCESS,\n          payload: {\n            posts: response.data\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: postConstants.POST_GET_ALL_FAILURE,\n          payload: error\n        });\n      });\n    } catch (error) {\n      console.log(error.response);\n      dispatch({\n        type: postConstants.POST_GET_ALL_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const editPostById = (postId, data) => {\n  return async dispatch => {\n    dispatch({\n      type: postConstants.POST_REQUEST\n    });\n    try {\n      await axios.put(baseURL + `/posts/${postId}`, data).then(() => {\n        dispatch({\n          type: postConstants.POST_DELETE_SUCCESS,\n          payload: {}\n        });\n        axios.get(baseURL + `/posts`).then(response => {\n          console.log(response.data);\n          dispatch({\n            type: postConstants.POST_GET_ALL_SUCCESS,\n            payload: {\n              posts: response.data\n            }\n          });\n        });\n      }).catch(error => {\n        dispatch({\n          type: postConstants.POST_DELETE_FAILURE,\n          payload: error\n        });\n      });\n    } catch (error) {\n      console.log(error.response);\n      dispatch({\n        type: postConstants.POST_DELETE_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const deletePostById = postId => {\n  return async dispatch => {\n    dispatch({\n      type: postConstants.POST_REQUEST\n    });\n    try {\n      await axios.delete(baseURL + `/posts/${postId}`).then(() => {\n        dispatch({\n          type: postConstants.POST_DELETE_SUCCESS,\n          payload: {}\n        });\n        axios.get(baseURL + `/posts`).then(response => {\n          console.log(response.data);\n          dispatch({\n            type: postConstants.POST_GET_ALL_SUCCESS,\n            payload: {\n              posts: response.data\n            }\n          });\n        });\n      }).catch(error => {\n        dispatch({\n          type: postConstants.POST_DELETE_FAILURE,\n          payload: error\n        });\n      });\n    } catch (error) {\n      console.log(error.response);\n      dispatch({\n        type: postConstants.POST_DELETE_FAILURE,\n        payload: error\n      });\n    }\n  };\n};","map":{"version":3,"names":["postConstants","axios","baseURL","createPost","data","console","log","dispatch","type","POST_REQUEST","post","then","response","POST_CREATE_SUCCESS","payload","posts","get","POST_GET_ALL_SUCCESS","catch","error","POST_CREATE_FAILURE","getAllPost","POST_GET_ALL_FAILURE","getPostById","postId","editPostById","put","POST_DELETE_SUCCESS","POST_DELETE_FAILURE","deletePostById","delete"],"sources":["C:/Users/Harshal Chute/Music/Desktop/sam/task-post-app copy/src/actions/posts.actions.js"],"sourcesContent":["import { postConstants } from \"./constants\";\r\nimport axios from \"axios\";\r\n\r\nconst baseURL = \"http://localhost:8000\";\r\n\r\nexport const createPost = (data) => {\r\n    console.log(data)\r\n    return async dispatch => {\r\n        dispatch({ type: postConstants.POST_REQUEST });\r\n        try {\r\n            await axios.post(baseURL + `/posts`, data).then((response) => {\r\n                console.log(response.data);\r\n                dispatch({\r\n                    type: postConstants.POST_CREATE_SUCCESS,\r\n                    payload: {\r\n                        posts: response.data\r\n                    }\r\n                });\r\n                axios.get(baseURL + `/posts`).then((response) => {\r\n                    console.log(response.data);\r\n                    dispatch({\r\n                        type: postConstants.POST_GET_ALL_SUCCESS,\r\n                        payload: {\r\n                            posts: response.data\r\n                        }\r\n                    });\r\n                })\r\n            }).catch((error) => {\r\n                dispatch({\r\n                    type: postConstants.POST_CREATE_FAILURE,\r\n                    payload: error\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            dispatch({\r\n                type: postConstants.POST_CREATE_FAILURE,\r\n                payload: error\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const getAllPost = () => {\r\n    return async dispatch => {\r\n        dispatch({ type: postConstants.POST_REQUEST });\r\n        try {\r\n            await axios.get(baseURL + `/posts`).then((response) => {\r\n                console.log(response.data);\r\n                dispatch({\r\n                    type: postConstants.POST_GET_ALL_SUCCESS,\r\n                    payload: {\r\n                        posts: response.data\r\n                    }\r\n                });\r\n            }).catch((error) => {\r\n                dispatch({\r\n                    type: postConstants.POST_CREATE_FAILURE,\r\n                    payload: error\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            dispatch({\r\n                type: postConstants.POST_GET_ALL_FAILURE,\r\n                payload: error\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const getPostById = (postId) => {\r\n    return async dispatch => {\r\n        dispatch({ type: postConstants.POST_REQUEST });\r\n        try {\r\n            await axios.get(baseURL + `/posts/${postId}`).then((response) => {\r\n                console.log(response.data);\r\n                dispatch({\r\n                    type: postConstants.POST_GET_ALL_SUCCESS,\r\n                    payload: {\r\n                        posts: response.data\r\n                    }\r\n                });\r\n            }).catch((error) => {\r\n                dispatch({\r\n                    type: postConstants.POST_GET_ALL_FAILURE,\r\n                    payload: error\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            dispatch({\r\n                type: postConstants.POST_GET_ALL_FAILURE,\r\n                payload: error\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const editPostById = (postId, data) => {\r\n    return async dispatch => {\r\n        dispatch({ type: postConstants.POST_REQUEST });\r\n        try {\r\n            await axios.put(baseURL + `/posts/${postId}`, data).then(() => {\r\n                dispatch({\r\n                    type: postConstants.POST_DELETE_SUCCESS,\r\n                    payload: {}\r\n                });\r\n                axios.get(baseURL + `/posts`).then((response) => {\r\n                    console.log(response.data);\r\n                    dispatch({\r\n                        type: postConstants.POST_GET_ALL_SUCCESS,\r\n                        payload: {\r\n                            posts: response.data\r\n                        }\r\n                    });\r\n                })\r\n            }).catch((error) => {\r\n                dispatch({\r\n                    type: postConstants.POST_DELETE_FAILURE,\r\n                    payload: error\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            dispatch({\r\n                type: postConstants.POST_DELETE_FAILURE,\r\n                payload: error\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const deletePostById = (postId) => {\r\n    return async dispatch => {\r\n        dispatch({ type: postConstants.POST_REQUEST });\r\n        try {\r\n            await axios.delete(baseURL + `/posts/${postId}`).then(() => {\r\n                dispatch({\r\n                    type: postConstants.POST_DELETE_SUCCESS,\r\n                    payload: {}\r\n                });\r\n                axios.get(baseURL + `/posts`).then((response) => {\r\n                    console.log(response.data);\r\n                    dispatch({\r\n                        type: postConstants.POST_GET_ALL_SUCCESS,\r\n                        payload: {\r\n                            posts: response.data\r\n                        }\r\n                    });\r\n                })\r\n            }).catch((error) => {\r\n                dispatch({\r\n                    type: postConstants.POST_DELETE_FAILURE,\r\n                    payload: error\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            dispatch({\r\n                type: postConstants.POST_DELETE_FAILURE,\r\n                payload: error\r\n            });\r\n        }\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}