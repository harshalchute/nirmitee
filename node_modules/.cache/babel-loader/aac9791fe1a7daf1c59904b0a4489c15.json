{"ast":null,"code":"import { commentConstants } from \"./constants\";\nimport axios from \"axios\";\nconst baseURL = \"http://localhost:8000\";\nexport const addCmt = data => {\n  return async dispatch => {\n    dispatch({\n      type: commentConstants.COMMENT_REQUEST\n    });\n    try {\n      await axios.post(baseURL + `/comments`, data).then(response => {\n        // console.log(response.data);\n        dispatch({\n          type: commentConstants.POST_CREATE_SUCCESS,\n          payload: {\n            posts: response.data\n          }\n        });\n        axios.get(baseURL + `/comments`).then(response => {\n          console.log(response.data);\n          dispatch({\n            type: commentConstants.POST_GET_ALL_SUCCESS,\n            payload: {\n              posts: response.data\n            }\n          });\n        });\n      }).catch(error => {\n        dispatch({\n          type: commentConstants.POST_CREATE_FAILURE,\n          payload: error\n        });\n      });\n    } catch (error) {\n      console.log(error.response);\n      dispatch({\n        type: commentConstants.POST_CREATE_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const getAllCmt = () => {\n  return async dispatch => {\n    dispatch({\n      type: commentConstants.POST_REQUEST\n    });\n    try {\n      await axios.get(baseURL + `/posts`).then(response => {\n        console.log(response.data);\n        dispatch({\n          type: commentConstants.POST_GET_ALL_SUCCESS,\n          payload: {\n            posts: response.data\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: commentConstants.POST_GET_ALL_FAILURE,\n          payload: error\n        });\n      });\n    } catch (error) {\n      console.log(error.response);\n      dispatch({\n        type: commentConstants.POST_GET_ALL_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const getCmtById = postId => {\n  return async dispatch => {\n    dispatch({\n      type: commentConstants.POST_REQUEST\n    });\n    try {\n      await axios.get(baseURL + `/posts/${postId}`).then(response => {\n        console.log(response.data);\n        dispatch({\n          type: commentConstants.POST_GET_SUCCESS,\n          payload: {\n            posts: response.data\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: commentConstants.POST_GET_FAILURE,\n          payload: error\n        });\n      });\n    } catch (error) {\n      console.log(error.response);\n      dispatch({\n        type: commentConstants.POST_GET_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const editCmtById = (postId, data) => {\n  return async dispatch => {\n    dispatch({\n      type: commentConstants.POST_REQUEST\n    });\n    try {\n      await axios.put(baseURL + `/posts/${postId}`, data).then(() => {\n        dispatch({\n          type: commentConstants.POST_EDITED_SUCCESS,\n          payload: {}\n        });\n        axios.get(baseURL + `/posts`).then(response => {\n          console.log(response.data);\n          dispatch({\n            type: commentConstants.POST_GET_ALL_SUCCESS,\n            payload: {\n              posts: response.data\n            }\n          });\n        });\n      }).catch(error => {\n        dispatch({\n          type: commentConstants.POST_EDITED_FAILURE,\n          payload: error\n        });\n      });\n    } catch (error) {\n      console.log(error.response);\n      dispatch({\n        type: commentConstants.POST_EDITED_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const deleteCmtById = postId => {\n  return async dispatch => {\n    dispatch({\n      type: commentConstants.POST_REQUEST\n    });\n    try {\n      await axios.delete(baseURL + `/posts/${postId}`).then(() => {\n        dispatch({\n          type: commentConstants.POST_DELETE_SUCCESS,\n          payload: {}\n        });\n        axios.get(baseURL + `/posts`).then(response => {\n          console.log(response.data);\n          dispatch({\n            type: commentConstants.POST_GET_ALL_SUCCESS,\n            payload: {\n              posts: response.data\n            }\n          });\n        });\n      }).catch(error => {\n        dispatch({\n          type: commentConstants.POST_DELETE_FAILURE,\n          payload: error\n        });\n      });\n    } catch (error) {\n      console.log(error.response);\n      dispatch({\n        type: commentConstants.POST_DELETE_FAILURE,\n        payload: error\n      });\n    }\n  };\n};","map":{"version":3,"names":["commentConstants","axios","baseURL","addCmt","data","dispatch","type","COMMENT_REQUEST","post","then","response","POST_CREATE_SUCCESS","payload","posts","get","console","log","POST_GET_ALL_SUCCESS","catch","error","POST_CREATE_FAILURE","getAllCmt","POST_REQUEST","POST_GET_ALL_FAILURE","getCmtById","postId","POST_GET_SUCCESS","POST_GET_FAILURE","editCmtById","put","POST_EDITED_SUCCESS","POST_EDITED_FAILURE","deleteCmtById","delete","POST_DELETE_SUCCESS","POST_DELETE_FAILURE"],"sources":["C:/Users/Harshal Chute/Music/Desktop/sam/task-post-app copy/src/actions/comments.actions.js"],"sourcesContent":["import { commentConstants } from \"./constants\";\r\nimport axios from \"axios\";\r\n\r\nconst baseURL = \"http://localhost:8000\";\r\n\r\nexport const addCmt = (data) => {\r\n    return async dispatch => {\r\n        dispatch({ type: commentConstants.COMMENT_REQUEST });\r\n        try {\r\n            await axios.post(baseURL + `/comments`, data).then((response) => {\r\n                // console.log(response.data);\r\n                dispatch({\r\n                    type: commentConstants.POST_CREATE_SUCCESS,\r\n                    payload: {\r\n                        posts: response.data\r\n                    }\r\n                });\r\n                axios.get(baseURL + `/comments`).then((response) => {\r\n                    console.log(response.data);\r\n                    dispatch({\r\n                        type: commentConstants.POST_GET_ALL_SUCCESS,\r\n                        payload: {\r\n                            posts: response.data\r\n                        }\r\n                    });\r\n                })\r\n            }).catch((error) => {\r\n                dispatch({\r\n                    type: commentConstants.POST_CREATE_FAILURE,\r\n                    payload: error\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            dispatch({\r\n                type: commentConstants.POST_CREATE_FAILURE,\r\n                payload: error\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const getAllCmt = () => {\r\n    return async dispatch => {\r\n        dispatch({ type: commentConstants.POST_REQUEST });\r\n        try {\r\n            await axios.get(baseURL + `/posts`).then((response) => {\r\n                console.log(response.data);\r\n                dispatch({\r\n                    type: commentConstants.POST_GET_ALL_SUCCESS,\r\n                    payload: {\r\n                        posts: response.data\r\n                    }\r\n                });\r\n            }).catch((error) => {\r\n                dispatch({\r\n                    type: commentConstants.POST_GET_ALL_FAILURE,\r\n                    payload: error\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            dispatch({\r\n                type: commentConstants.POST_GET_ALL_FAILURE,\r\n                payload: error\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCmtById = (postId) => {\r\n    return async dispatch => {\r\n        dispatch({ type: commentConstants.POST_REQUEST });\r\n        try {\r\n            await axios.get(baseURL + `/posts/${postId}`).then((response) => {\r\n                console.log(response.data);\r\n                dispatch({\r\n                    type: commentConstants.POST_GET_SUCCESS,\r\n                    payload: {\r\n                        posts: response.data\r\n                    }\r\n                });\r\n            }).catch((error) => {\r\n                dispatch({\r\n                    type: commentConstants.POST_GET_FAILURE,\r\n                    payload: error\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            dispatch({\r\n                type: commentConstants.POST_GET_FAILURE,\r\n                payload: error\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const editCmtById = (postId, data) => {\r\n    return async dispatch => {\r\n        dispatch({ type: commentConstants.POST_REQUEST });\r\n        try {\r\n            await axios.put(baseURL + `/posts/${postId}`, data).then(() => {\r\n                dispatch({\r\n                    type: commentConstants.POST_EDITED_SUCCESS,\r\n                    payload: {}\r\n                });\r\n                axios.get(baseURL + `/posts`).then((response) => {\r\n                    console.log(response.data);\r\n                    dispatch({\r\n                        type: commentConstants.POST_GET_ALL_SUCCESS,\r\n                        payload: {\r\n                            posts: response.data\r\n                        }\r\n                    });\r\n                })\r\n            }).catch((error) => {\r\n                dispatch({\r\n                    type: commentConstants.POST_EDITED_FAILURE,\r\n                    payload: error\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            dispatch({\r\n                type: commentConstants.POST_EDITED_FAILURE,\r\n                payload: error\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteCmtById = (postId) => {\r\n    return async dispatch => {\r\n        dispatch({ type: commentConstants.POST_REQUEST });\r\n        try {\r\n            await axios.delete(baseURL + `/posts/${postId}`).then(() => {\r\n                dispatch({\r\n                    type: commentConstants.POST_DELETE_SUCCESS,\r\n                    payload: {}\r\n                });\r\n                axios.get(baseURL + `/posts`).then((response) => {\r\n                    console.log(response.data);\r\n                    dispatch({\r\n                        type: commentConstants.POST_GET_ALL_SUCCESS,\r\n                        payload: {\r\n                            posts: response.data\r\n                        }\r\n                    });\r\n                })\r\n            }).catch((error) => {\r\n                dispatch({\r\n                    type: commentConstants.POST_DELETE_FAILURE,\r\n                    payload: error\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            dispatch({\r\n                type: commentConstants.POST_DELETE_FAILURE,\r\n                payload: error\r\n            });\r\n        }\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}